; в том случае, когда в качестве свойства одной модели должна быть ссылка на запись в другой модели, используется 3 типа связей:

; в качестве автора поста будет использован целй класс Юзер, который является одной записью в другой таблице БД

; например, в БД про фильмы указывается ссылка на БД с актёрами, вместого того, чтобы привязывать имя актёра как отдельное свойство

; есть 3 типа связей:

один к одному
models.OneToOneField
; у 1 строки в первой таблице может быть только 1 строка во второй. в одном ноутбуке есть тошлько одна материнка. в одной машине только один водитель

один ко многим
models.ForeignKey
; у 1 строки в первой таблице может быть несколько ссылок на неё во второй
; у одного учителя много учеников(в рамках 1 занятие). у разных учеников 1 учитель.

много ко многим
; один актёр может сниматься в разных фильмах. в одном фильме может быть много разных актёров.



; при удалении записи, на которую ссылается связь (например, один-ко-многим), в записи образуется пустота. Но это недопустимо, поэтому джанго не позволит создать ссылку на другую модель без указания того, что произойдёт при её удалении.

; это настраивается в аргументе on_delete

CASCADE
; каскад можно сравнить со ступенями водопада. Если вода престанет течь на первую ступень, то и последняя останется без воды. Если пользователь удалён, то джанго каскадно удалит все записи во всех моделях, которые на него ссылались

PROTECT
; ЗАЩИТА от удаления - пора у пользователя есть хоть 1 пост, его удалить нельзя.

SET__NULL
; поставить значение Null, в этом случае важно корректировать отображение имени и аватарки автора на фронтенде

SET_DEFAULT
; присваивает запись, которая пользуется в таких случаях. Например, "удалённый пользователь". Это тоже должен быть зарегистрированный юзер, а не просто надпись

DO_NOTHING
; ничего не делать. Опасный вариант, поскольку в БД будет ссылка на несуществующую запись, а значит при попытке обращения к ней будет ошибка сервера и сайт сломается.

; если сначала создать модель без привязки к другой модели(к модели отзыв не было привязано свойство Автор ссылкой на модель Юзер), и провести миграции, то при добавлении такого свойства и проведении новых миграций, БД потребует заполнить уже существующие записи, для когторых автора не существовало.

например - сейчас к Отзыву привязано 3 свойства, и есть 2 записи в БД. Когда появляется 4-ое свойство, к этим 2 записям надо его добавить. Если была добавлена ссылка на другую модель, то надо добавить айди.

джанго выдаст запрос на добавление значений при следующей миграции. выглядить он будет так:
python manage.py makemigrations
It is impossible to add a non-nullable field 'автор' to отзыв without specifying a default. This is because the database needs something to populate existing rows.
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit and manually define a default value in models.py.
Select an option: 

; 1 вариант
стоит выбрать его. В этом случае следщующей строкой появится сообщение:
Please enter the default value as valid Python
>>>
укажем здесь дефолтное значение. если это ссылка на другую модель, укажем существующий там айди. Скорее всего 1 сработает

; 2 вариант
в models.py к новому полю нужно добавить аргумент default, привязав к нему тот же айди, что ип в 1 варианте



ОБРАЩЕНИЕ К АВАТАРКЕ АВТОРА ЧЕРЕЗ МОДЕЛЬ ПОСТА
; в нашем случае у автора аватарка подтягивается через отдельную таблицу (модель) "Аватарка". Напрямую к отзыву аватарка не привязана.

; Обращение к ней должно идти по такому идти по такому пути:
пост 

автор (получили ссылку на Юзера)

аватарка (название модели с маленькой буквы, запись в которой привязана к тому же Юзеру через связь один-к-одному)

картинка (название поля в модели Аватарка)

url (ссылка на этот файл)

; весь этот путь пишется через точку в одну строку